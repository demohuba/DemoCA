// <auto-generated />
using System;
using JEPCO.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JEPCO.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("customers")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JEPCO.Domain.Entities.AuditLogEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("audit_logs", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("customers", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.CustomerMeterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SapFileNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("customer_meters", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_CustomerMeterRelationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_customer_meter_relation_types", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "مالك",
                            NameEN = "Owner",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "مستأجر",
                            NameEN = "Tenant",
                            Order = 2
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_GenderEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_genders", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "ذكر",
                            NameEN = "Male",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "أنثى",
                            NameEN = "Female",
                            Order = 2
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_languages", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "العربية",
                            NameEN = "Arabic",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "الإنجليزية",
                            NameEN = "English",
                            Order = 2
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_MobilePlatformTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_mobile_platform_types", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "Android",
                            NameEN = "Android",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "IOS",
                            NameEN = "IOS",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            NameAR = "Huawei",
                            NameEN = "Huawei",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            NameAR = "Other",
                            NameEN = "Other",
                            Order = 4
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_NotificationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_notification_types", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "إشعارات التطبيق",
                            NameEN = "App Notifications",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "البريد الإلكتروني",
                            NameEN = "Email",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            NameAR = "الرسائل النصية",
                            NameEN = "SMS",
                            Order = 3
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_SelfMeterReadSapStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_self_meter_read_sap_status", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "قيد البدء",
                            NameEN = "Initiated",
                            Order = 1
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_UserTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("lk_user_types", "customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "مدير",
                            NameEN = "Admin",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "مستخدم",
                            NameEN = "Customer",
                            Order = 3
                        });
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.SelfMetersReadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExportedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExportedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("FirstMeterReadVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstReadImage")
                        .HasColumnType("text");

                    b.Property<long?>("FirstReadNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("MeterNumber")
                        .HasColumnType("text");

                    b.Property<int>("SapStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScanDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("SecondMeterReadVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("SecondReadImage")
                        .HasColumnType("text");

                    b.Property<long?>("SecondReadNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SapStatusId");

                    b.ToTable("self_meters_reads", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserCloudMessagingTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("MobilePlatformId")
                        .HasColumnType("integer");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MobilePlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("user_cloud_messaging_tokens", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PreferredLanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PreferredLanguageId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("users", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserNotificationPreferencesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("user_notification_preferences", "customers");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.CustomerEntity", b =>
                {
                    b.HasOne("JEPCO.Domain.Entities.UserEntity", "User")
                        .WithOne("Customer")
                        .HasForeignKey("JEPCO.Domain.Entities.CustomerEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.CustomerMeterEntity", b =>
                {
                    b.HasOne("JEPCO.Domain.Entities.CustomerEntity", "Customer")
                        .WithMany("CustomerMeters")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JEPCO.Domain.Entities.LK_CustomerMeterRelationTypeEntity", "RelationTypes")
                        .WithMany("CustomerMeters")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RelationTypes");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.SelfMetersReadEntity", b =>
                {
                    b.HasOne("JEPCO.Domain.Entities.CustomerEntity", "Customer")
                        .WithMany("SelfMetersRead")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JEPCO.Domain.Entities.LK_SelfMeterReadSapStatusEntity", "SapStatus")
                        .WithMany("SelfMetersReads")
                        .HasForeignKey("SapStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SapStatus");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserCloudMessagingTokenEntity", b =>
                {
                    b.HasOne("JEPCO.Domain.Entities.LK_MobilePlatformTypeEntity", "MobilePlatform")
                        .WithMany("UserCloudMessagingTokens")
                        .HasForeignKey("MobilePlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JEPCO.Domain.Entities.UserEntity", "User")
                        .WithMany("CloudMessagingTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MobilePlatform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("JEPCO.Domain.Entities.LK_GenderEntity", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JEPCO.Domain.Entities.LK_LanguageEntity", "PreferredLanguage")
                        .WithMany("Users")
                        .HasForeignKey("PreferredLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JEPCO.Domain.Entities.LK_UserTypeEntity", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PreferredLanguage");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserNotificationPreferencesEntity", b =>
                {
                    b.HasOne("JEPCO.Domain.Entities.LK_NotificationTypeEntity", "NotificationType")
                        .WithMany("UserNotificationPreferences")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JEPCO.Domain.Entities.UserEntity", "User")
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.CustomerEntity", b =>
                {
                    b.Navigation("CustomerMeters");

                    b.Navigation("SelfMetersRead");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_CustomerMeterRelationTypeEntity", b =>
                {
                    b.Navigation("CustomerMeters");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_GenderEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_LanguageEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_MobilePlatformTypeEntity", b =>
                {
                    b.Navigation("UserCloudMessagingTokens");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_NotificationTypeEntity", b =>
                {
                    b.Navigation("UserNotificationPreferences");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_SelfMeterReadSapStatusEntity", b =>
                {
                    b.Navigation("SelfMetersReads");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.LK_UserTypeEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JEPCO.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("CloudMessagingTokens");

                    b.Navigation("Customer");

                    b.Navigation("NotificationPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
